# -*- coding: utf-8 -*-
"""LVADSUSR102_prabu_LAB2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1kpRPbC_b0EreQw6zzQPNniBrgbIH3ikD
"""

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.preprocessing import LabelEncoder
from sklearn import datasets
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, confusion_matrix

data=pd.read_csv('/content/drive/MyDrive/booking.csv')

#handling missing value
if data.isna().sum().sum() > 0:
    data.dropna(inplace=True)

#handiling duplicates
data=data.drop_duplicates()

#encoding categorical data
label_encoder = LabelEncoder()
data['type of meal'] = label_encoder.fit_transform(data['type of meal'])
label_encoder = LabelEncoder()
data['room type'] = label_encoder.fit_transform(data['room type'])
label_encoder = LabelEncoder()
data['market segment type'] = label_encoder.fit_transform(data['market segment type'])

data=data.drop('Booking_ID',axis=1)
data=data.drop('date of reservation',axis=1)

# assigning X
X=data.drop('booking status',axis=1)


# plotting with outliers

plt.figure(figsize=(9, 5))
sns.boxplot(data=X)
plt.title("Before managing Outliers")
plt.ylabel('Values')
plt.xticks(rotation=45)
plt.show()


#function to manage outliers
def manage_outliers(data, columns):
    for col in columns:
        Q1 = data[col].quantile(0.25)
        Q3 = data[col].quantile(0.75)
        IQR = Q3 - Q1
        lower_bound = Q1 - 1.5 * IQR
        upper_bound = Q3 + 1.5 * IQR
        median = data[col].median()
        data[col] = np.where((data[col] < lower_bound) | (data[col] > upper_bound), median, data[col])
    return data

X = manage_outliers(X, X.columns)

#plotting after managing the outliers
plt.figure(figsize=(9, 5))
sns.boxplot(data=X)
plt.title("After managing Outliers")
plt.ylabel('Values')
plt.xticks(rotation=45)
plt.show()


#handling target by encoding and assigning y
label_encoder = LabelEncoder()
data['booking status'] = label_encoder.fit_transform(data['booking status'])
y=data['booking status']

# Assigning Test and Training variables
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

# executing Logistic Regression
clf = LogisticRegression()
clf.fit(X_train, y_train)
predictions = clf.predict(X_test)

# print predicted values
print("-----predictions-------")
print(predictions)
# Calculate performance metrics
print("----------performance matrices------------")
accuracy = accuracy_score(y_test, predictions)
precision = precision_score(y_test, predictions, average='weighted')
recall = recall_score(y_test, predictions, average='weighted')
f1 = f1_score(y_test, predictions, average='weighted')
conf_matrix = confusion_matrix(y_test, predictions)

# Print the performance metrics
print('Accuracy:', accuracy)
print('Precision:', precision)
print('Recall:', recall)
print('F1-score:', f1)
print('Confusion Matrix:\n', conf_matrix)