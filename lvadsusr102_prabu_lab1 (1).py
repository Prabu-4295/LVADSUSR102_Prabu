# -*- coding: utf-8 -*-
"""LVADSUSR102_Prabu_LAB1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1AF1_HaZsg96vC4ZXRJUmExK-9VoqXSp3

**1. The objective is to apply linear regression to predict "Charges" using dataset features**
"""

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import r2_score,mean_squared_error
from sklearn.preprocessing import LabelEncoder


data=pd.read_csv('/content/drive/MyDrive/expenses.csv')

#handling missing value
if data.isna().sum().sum() > 0:
    data.dropna(inplace=True)

#encoding categorical data
label_encoder = LabelEncoder()
data['gender'] = label_encoder.fit_transform(data['sex'])
label_encoder = LabelEncoder()
data['smoke'] = label_encoder.fit_transform(data['smoker'])
label_encoder = LabelEncoder()
data['reigons'] = label_encoder.fit_transform(data['region'])

data=data.drop('sex',axis=1)
data=data.drop('smoker',axis=1)
data=data.drop('region',axis=1)

# assigning X and y
X=data.drop('charges',axis=1)
y=data['charges']

# plotting with outliers
plt.figure(figsize=(5, 5))
sns.boxplot(data=X)
plt.title("Before managing Outliers")
plt.ylabel('Values')
plt.xticks(rotation=45)
plt.show()

#function to manage outliers
def manage_outliers(data, columns):
    for col in columns:
        Q1 = data[col].quantile(0.25)
        Q3 = data[col].quantile(0.75)
        IQR = Q3 - Q1
        lower_bound = Q1 - 1.5 * IQR
        upper_bound = Q3 + 1.5 * IQR
        median = data[col].median()
        data[col] = np.where((data[col] < lower_bound) | (data[col] > upper_bound), median, data[col])
    return data

X = manage_outliers(X, X.columns)

#plotting after managing the outliers
plt.figure(figsize=(5, 5))
sns.boxplot(data=X)
plt.title("After managing Outliers")
plt.ylabel('Values')
plt.xticks(rotation=45)
plt.show()

#Assinging Training and Test variables
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

# using linear regression for prediction
linear_model = LinearRegression()
linear_model.fit(X_train, y_train)
prediction = linear_model.predict(X_test)

#printing predictions
print(prediction)
print("--------Example Predictions for 4 values as the array is big--------")
print(prediction[0])
print(prediction[1])
print(prediction[2])
print(prediction[3])

# Evaluation matrices
r2 = r2_score(y_test, prediction)
rmse = np.sqrt(mean_squared_error(y_test, prediction))

print("----------Evaluation metrices-----------")
print("R-squared:", r2)
print("Root Mean Squared Error (RMSE):", rmse)

"""**Importance of Learning Rate**

In linear regression learing rate defines the rate that the model takes to learn and train the data. If it is not mentioned the models accuracy can be vary.
"""